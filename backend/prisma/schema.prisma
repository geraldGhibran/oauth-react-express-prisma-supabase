// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id                Int                @id @default(autoincrement())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  username          String
  website           String
  bio               String
  authorEmail       String             @unique
  isPublic          Boolean            @default(false)
  picture           Picture?
  backgroundPicture BackgroundPicture?
  posts             Post[]
  likes             Like[]
  followers         Follower[]         @relation("UserFollowers")
  following         Follower[]         @relation("UserFollowing")
}

model Follower {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  followedAt  DateTime @default(now())

  follower  Profile @relation("UserFollowing", fields: [followerId], references: [id])
  following Profile @relation("UserFollowers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Post {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  title       String
  content     String?
  published   Boolean       @default(false)
  viewCount   Int           @default(0)
  profileId   Int?
  profile     Profile?      @relation(fields: [profileId], references: [id])
  postPicture PostPicture[]
  likes       Like[]
  comments    Comment[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  postId    Int
  Post      Post     @relation(fields: [postId], references: [id])
  profileId Int
  Profile   Profile  @relation(fields: [profileId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  postId    Int
  Post      Post     @relation(fields: [postId], references: [id])
}

model Picture {
  id        Int      @id @default(autoincrement())
  avatarUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profileId Int      @unique
  profile   Profile  @relation(fields: [profileId], references: [id])
}

model BackgroundPicture {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profileId Int      @unique
  profile   Profile  @relation(fields: [profileId], references: [id])
}

model PostPicture {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profileId Int
  postId    Int      @unique
  post      Post     @relation(fields: [postId], references: [id])
}
